# -*- coding: utf-8-*-
import fellow
import typecheck

@fellow.app.task(name="sql.score_by_zipcode")
@typecheck.returns("92 * (string, number, number, count)")
def score_by_zipcode():
    return [(10001.0, 8.697445972495089, 0.30652883825886379, 509),
 (10451.0, 8.7834394904458595, 0.54116200724977692, 157),
 (10452.0, 8.8415841584158414, 0.61301602603174077, 101),
 (10004.0, 8.9929577464788739, 0.54453968823957088, 142),
 (10007.0, 9.2302158273381298, 0.53296272835119662, 139),
 (11236.0, 9.2432432432432439, 0.72908637882157956, 111),
 (11234.0, 9.3947368421052637, 0.52342794348371613, 152),
 (11430.0, 9.4932432432432439, 0.72454007586308189, 148),
 (11207.0, 9.625, 0.63648489175250167, 136),
 (11209.0, 9.6590909090909083, 0.52817437737433648, 264),
 (11231.0, 9.6603773584905657, 0.53674992755366324, 159),
 (11238.0, 9.6626016260162597, 0.5988900182336705, 246),
 (11217.0, 9.6889763779527556, 0.43586578068504855, 254),
 (10472.0, 9.7407407407407405, 0.64292759823177648, 108),
 (10306.0, 9.7477477477477485, 0.49658431482590842, 111),
 (11101.0, 9.7520000000000007, 0.45169247099482807, 250),
 (11218.0, 9.8027210884353746, 0.68243668298044802, 147),
 (11201.0, 9.8173913043478258, 0.39427884932202356, 345),
 (11369.0, 9.8269230769230766, 0.70676903032591887, 104),
 (10301.0, 9.9514563106796121, 0.65611949585250828, 103),
 (10468.0, 9.9626168224299061, 0.77029643129953662, 107),
 (10065.0, 9.9826589595375719, 0.45161611697896387, 173),
 (10461.0, 9.9870129870129869, 0.60245846476288489, 154),
 (11222.0, 9.9948186528497409, 0.53813436123812541, 193),
 (11368.0, 10.044827586206896, 0.45454941220380041, 290),
 (10023.0, 10.071065989847716, 0.55573549670811229, 197),
 (11105.0, 10.113821138211382, 0.671302347332697, 123),
 (11225.0, 10.178217821782178, 0.61698661500059548, 101),
 (11237.0, 10.23463687150838, 0.53881262045909672, 179),
 (11361.0, 10.285714285714286, 0.70018847617697755, 119),
 (10458.0, 10.290816326530612, 0.55286758916661904, 196),
 (10019.0, 10.315151515151515, 0.28599234770819371, 660),
 (10462.0, 10.324324324324325, 0.50427627280476339, 148),
 (11103.0, 10.363636363636363, 0.51223446482399537, 209),
 (10467.0, 10.420118343195266, 0.59505013029716958, 169),
 (11206.0, 10.441558441558442, 0.75598435929394259, 154),
 (10022.0, 10.471311475409836, 0.339953988473228, 488),
 (10036.0, 10.51433389544688, 0.33187699035423779, 593),
 (11435.0, 10.528301886792454, 0.67415482972534913, 106),
 (11385.0, 10.623015873015873, 0.44074672519724323, 252),
 (11215.0, 10.650537634408602, 0.38235365260075571, 372),
 (11204.0, 10.674796747967479, 0.63867281410426124, 123),
 (11106.0, 10.679487179487179, 0.65348763261372322, 156),
 (10011.0, 10.684665226781858, 0.36690557097532039, 463),
 (10038.0, 10.69047619047619, 0.74164639622144479, 168),
 (10027.0, 10.699386503067485, 0.59429582769281197, 163),
 (10463.0, 10.703125, 0.68674881787546327, 128),
 (10010.0, 10.792682926829269, 0.52545028892075096, 246),
 (10017.0, 10.797872340425531, 0.42180495558052195, 376),
 (11358.0, 10.832167832167832, 0.67324859248948921, 143),
 (11221.0, 10.891891891891891, 0.90881129905461056, 111),
 (10002.0, 10.896624472573839, 0.39763808898099651, 474),
 (10028.0, 10.906542056074766, 0.55633713666594276, 214),
 (11432.0, 10.914893617021276, 0.61374438326590997, 188),
 (10025.0, 10.945147679324894, 0.56934061223830623, 237),
 (11373.0, 10.973333333333333, 0.46857263840339353, 225),
 (10009.0, 10.983974358974359, 0.42956481265226054, 312),
 (11232.0, 11.018867924528301, 0.83574470152264535, 106),
 (10003.0, 11.035555555555556, 0.32634664969298383, 675),
 (10024.0, 11.074257425742575, 0.52021558836387827, 202),
 (11219.0, 11.085714285714285, 0.93076382490397069, 105),
 (10034.0, 11.10377358490566, 0.87563908072416885, 106),
 (10013.0, 11.110416666666667, 0.34986295605011053, 480),
 (10014.0, 11.117647058823529, 0.41003186680299836, 408),
 (10012.0, 11.124378109452737, 0.36610003714334466, 402),
 (10016.0, 11.219806763285025, 0.41702179892953778, 414),
 (11375.0, 11.224489795918368, 0.50595931774549829, 196),
 (10314.0, 11.248648648648649, 0.56067155265606283, 185),
 (11203.0, 11.269503546099291, 0.69101040747921516, 141),
 (11226.0, 11.273631840796019, 0.66351150602365316, 201),
 (11223.0, 11.297297297297296, 0.70412267269945206, 185),
 (11249.0, 11.348387096774193, 0.82603192617304511, 155),
 (10029.0, 11.350253807106599, 0.69582437834973299, 197),
 (11211.0, 11.375342465753425, 0.48454651326257259, 365),
 (11214.0, 11.377777777777778, 0.64205769630555709, 180),
 (11230.0, 11.421568627450981, 0.6926740750173116, 102),
 (10018.0, 11.471471471471471, 0.43388632670775928, 333),
 (11208.0, 11.508620689655173, 0.79903387029920891, 116),
 (11216.0, 11.512048192771084, 0.75810036952045357, 166),
 (11205.0, 11.848275862068965, 0.65494954870503064, 145),
 (11372.0, 11.956112852664576, 0.52162276932569351, 319),
 (11354.0, 11.983379501385041, 0.55320146247743052, 361),
 (10021.0, 12.032894736842104, 0.63726072698274316, 152),
 (11229.0, 12.056338028169014, 0.84178263642169115, 142),
 (10128.0, 12.119496855345911, 0.91482516666975444, 159),
 (11220.0, 12.211356466876971, 0.55138504455899728, 317),
 (11377.0, 12.308411214953271, 0.68515100515773586, 214),
 (11235.0, 12.352272727272727, 0.92466489350967362, 176),
 (10033.0, 12.366666666666667, 0.73487868749937446, 120),
 (11104.0, 12.37719298245614, 0.91549397975318281, 114),
 (10032.0, 12.52991452991453, 1.0018824493514187, 117),
 (11355.0, 13.223350253807107, 0.69603538646795338, 197)]

@fellow.app.task(name="sql.score_by_map")
@typecheck.returns("string")
def score_by_map():
    # must be url of the form https://x.cartodb.com/...
    return "https://cartodb.com"

@fellow.app.task(name="sql.score_by_borough")
@typecheck.returns("5 * (string, number, number, count)")
def score_by_borough():
    return [("MANHATTAN", 10.7269875502402, 0.0798259390597376, 10201)] * 5

@fellow.app.task(name="sql.score_by_cuisine")
@typecheck.returns("75 * (string, number, number, count)")
def score_by_cuisine():
    return [("French", 20.3550686378036, 0.17682605388627, 7576)] * 75

@fellow.app.task(name="sql.violation_by_cuisine")
@typecheck.returns("20 * ((string, string), number, count)")
def violation_by_cuisine():
    return [(("Caf√©/Coffee/Tea",
              "Toilet facility not maintained and provided with toilet paper; "
              "waste receptacle and self-closing door."),
             1.87684775827172, 315)] * 20
