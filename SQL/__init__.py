# -*- coding: utf-8-*-
import fellow
import typecheck

@fellow.app.task(name="sql.score_by_zipcode")
@typecheck.returns("92 * (string, number, number, count)")
def score_by_zipcode():
    return [(11225.0, 21.174666006927264, 0.13579759498545882, 101),
 (10452.0, 21.666361136571954, 0.14528813460974122, 101),
 (11230.0, 24.021691973969631, 0.15869439743873603, 102),
 (10301.0, 20.581283743251351, 0.12114253223041616, 103),
 (11369.0, 20.591995221027478, 0.13675939800735423, 104),
 (11219.0, 22.128552097428958, 0.1382161686262495, 105),
 (11435.0, 21.604319478402608, 0.12992581697802497, 106),
 (10034.0, 22.320117474302496, 0.12593271936570841, 106),
 (11232.0, 22.130981150314163, 0.14571259607306886, 106),
 (10468.0, 22.104070305272895, 0.16575568225403695, 107),
 (10472.0, 20.658988482724087, 0.13014959758425509, 108),
 (11236.0, 22.383215369059656, 0.14680635924479693, 111),
 (11221.0, 22.510136986301369, 0.15906119347115225, 111),
 (10306.0, 19.015512465373963, 0.10826438054774741, 111),
 (11104.0, 22.714285714285715, 0.12848405712284192, 114),
 (11208.0, 22.868733256792957, 0.12878318108278441, 116),
 (10032.0, 23.731099656357387, 0.14668552445756325, 117),
 (11361.0, 19.9583532790809, 0.11178967629079729, 119),
 (10033.0, 22.113469387755103, 0.11655145776540086, 120),
 (11204.0, 22.407027240426373, 0.12388569971874218, 123),
 (11105.0, 21.687824351297404, 0.11481610560936797, 123),
 (10463.0, 21.242828282828281, 0.11075941716459613, 128),
 (11207.0, 20.471054718477397, 0.092324322822668281, 136),
 (10007.0, 21.559110417479516, 0.10424324955751968, 139),
 (11203.0, 21.713423295454547, 0.10514246199301631, 141),
 (10004.0, 20.437789962041332, 0.097303901319835545, 142),
 (11229.0, 22.286210489753387, 0.10484097303333445, 142),
 (11358.0, 21.962829303500541, 0.10014359078401888, 143),
 (11205.0, 21.702141680395385, 0.098180195115872587, 145),
 (11218.0, 23.80806502031885, 0.10962962668737027, 147),
 (11430.0, 19.585847504114099, 0.091961561423074462, 148),
 (10462.0, 21.021255060728745, 0.10387862670266956, 148),
 (11234.0, 18.945891783567134, 0.084142153547248008, 152),
 (10021.0, 22.658478839893458, 0.1030031826658464, 152),
 (10461.0, 21.027596223674657, 0.10052080701294056, 154),
 (11206.0, 21.617133576938691, 0.0958227591892169, 154),
 (11249.0, 20.428416877028489, 0.07702258340889187, 155),
 (11106.0, 22.398936170212767, 0.098408314552894283, 156),
 (10451.0, 22.392642377078175, 0.1044005322598047, 157),
 (10128.0, 23.185957696827263, 0.099384892546506023, 159),
 (11231.0, 21.352941176470587, 0.091417747711652592, 159),
 (10027.0, 22.778005464480874, 0.097533543189666075, 163),
 (11216.0, 23.236073471845831, 0.094736521974564614, 166),
 (10038.0, 21.898205546492658, 0.08810387999438192, 168),
 (10467.0, 21.025978191148173, 0.0871075763204818, 169),
 (10065.0, 20.401324868893184, 0.070857311060329969, 173),
 (11235.0, 23.254340542187023, 0.096460911180264799, 176),
 (11237.0, 21.287352758834469, 0.074522270704458118, 179),
 (11214.0, 23.739612188365651, 0.088903955818023642, 180),
 (10314.0, 21.104534005037785, 0.07166429047513706, 185),
 (11223.0, 21.928736295441432, 0.087255724482795158, 185),
 (11432.0, 22.372652737371066, 0.086373264993101384, 188),
 (11222.0, 22.337138084632517, 0.077070010347529527, 193),
 (10458.0, 22.013929815162069, 0.075184165638004716, 196),
 (11375.0, 20.778710792788342, 0.063240258363296428, 196),
 (11355.0, 24.814897413024084, 0.080191587218206864, 197),
 (10023.0, 21.917737789203084, 0.076218697941442523, 197),
 (10029.0, 23.620480337820005, 0.087657690726520618, 197),
 (11226.0, 24.339778354161755, 0.086528885352258708, 201),
 (10024.0, 22.281985551153578, 0.073996201638348982, 202),
 (11103.0, 21.559838750314942, 0.072029361247167453, 209),
 (11377.0, 22.060877555708707, 0.06577610805789344, 214),
 (10028.0, 21.348417350527551, 0.064184225402053083, 214),
 (11373.0, 24.466032608695652, 0.071769906566455405, 225),
 (10025.0, 23.335292964922594, 0.064789569048100737, 237),
 (10010.0, 22.672749391727493, 0.065310073647343314, 246),
 (11238.0, 21.771921531552824, 0.060359793838035664, 246),
 (11101.0, 21.856084867894314, 0.056786343154255708, 250),
 (11385.0, 21.996373161394317, 0.063049569498567742, 252),
 (11217.0, 20.602597402597404, 0.054798843817944899, 254),
 (11209.0, 20.643796802266749, 0.053490700714899565, 264),
 (11368.0, 23.540504867183632, 0.055728873187499688, 290),
 (10009.0, 21.99778891509434, 0.047048001753969892, 312),
 (11220.0, 25.863225468361065, 0.054762411928815861, 317),
 (11372.0, 24.170565045992117, 0.053388840623696775, 319),
 (10018.0, 22.9769000427777, 0.046349364831840545, 333),
 (11201.0, 21.906092871931381, 0.042770235353937411, 345),
 (11354.0, 26.462010098581391, 0.053174358848053889, 361),
 (11211.0, 21.099701046337817, 0.038553348975096158, 365),
 (11215.0, 21.415857605177994, 0.038239344293957693, 372),
 (10017.0, 22.425101214574898, 0.039394256598706677, 376),
 (10012.0, 21.120305306518052, 0.032424936063976048, 402),
 (10014.0, 21.526370455856895, 0.033931451519808829, 408),
 (10016.0, 22.781260167010085, 0.035543335005987851, 414),
 (10011.0, 21.360410525166504, 0.029546601663092982, 463),
 (10002.0, 24.277107190756215, 0.035779431110738294, 474),
 (10013.0, 23.894068167878736, 0.033547020518115825, 480),
 (10022.0, 21.987890505749466, 0.031617604475860199, 488),
 (10001.0, 20.861558050700314, 0.029531683408611877, 509),
 (10036.0, 22.423251351822781, 0.02604925381364883, 593),
 (10019.0, 21.433634808115375, 0.021714535627203584, 660),
 (10003.0, 22.491749174917491, 0.022288964413049697, 675)]

@fellow.app.task(name="sql.score_by_map")
@typecheck.returns("string")
def score_by_map():
    # must be url of the form https://x.cartodb.com/...
    return "https://cartodb.com"

@fellow.app.task(name="sql.score_by_borough")
@typecheck.returns("5 * (string, number, number, count)")
def score_by_borough():
    return [("MANHATTAN", 10.7269875502402, 0.0798259390597376, 10201)] * 5

@fellow.app.task(name="sql.score_by_cuisine")
@typecheck.returns("75 * (string, number, number, count)")
def score_by_cuisine():
    return [("French", 20.3550686378036, 0.17682605388627, 7576)] * 75

@fellow.app.task(name="sql.violation_by_cuisine")
@typecheck.returns("20 * ((string, string), number, count)")
def violation_by_cuisine():
    return [(("Caf√©/Coffee/Tea",
              "Toilet facility not maintained and provided with toilet paper; "
              "waste receptacle and self-closing door."),
             1.87684775827172, 315)] * 20
